/*
Libre Graph API

Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.

API version: v1.0.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libregraph

import (
	"encoding/json"
)

// GeoCoordinates The GeoCoordinates resource provides geographic coordinates and elevation of a location based on metadata contained within the file. If a DriveItem has a non-null location facet, the item represents a file with a known location assocaited with it.
type GeoCoordinates struct {
	// The altitude (height), in feet, above sea level for the item. Read-only.
	Altitude *float64 `json:"altitude,omitempty"`
	// The latitude, in decimal, for the item. Read-only.
	Latitude *float64 `json:"latitude,omitempty"`
	// The longitude, in decimal, for the item. Read-only.
	Longitude *float64 `json:"longitude,omitempty"`
}

// NewGeoCoordinates instantiates a new GeoCoordinates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeoCoordinates() *GeoCoordinates {
	this := GeoCoordinates{}
	return &this
}

// NewGeoCoordinatesWithDefaults instantiates a new GeoCoordinates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeoCoordinatesWithDefaults() *GeoCoordinates {
	this := GeoCoordinates{}
	return &this
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *GeoCoordinates) GetAltitude() float64 {
	if o == nil || o.Altitude == nil {
		var ret float64
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoCoordinates) GetAltitudeOk() (*float64, bool) {
	if o == nil || o.Altitude == nil {
		return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *GeoCoordinates) HasAltitude() bool {
	if o != nil && o.Altitude != nil {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given float64 and assigns it to the Altitude field.
func (o *GeoCoordinates) SetAltitude(v float64) {
	o.Altitude = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *GeoCoordinates) GetLatitude() float64 {
	if o == nil || o.Latitude == nil {
		var ret float64
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoCoordinates) GetLatitudeOk() (*float64, bool) {
	if o == nil || o.Latitude == nil {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *GeoCoordinates) HasLatitude() bool {
	if o != nil && o.Latitude != nil {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float64 and assigns it to the Latitude field.
func (o *GeoCoordinates) SetLatitude(v float64) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *GeoCoordinates) GetLongitude() float64 {
	if o == nil || o.Longitude == nil {
		var ret float64
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeoCoordinates) GetLongitudeOk() (*float64, bool) {
	if o == nil || o.Longitude == nil {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *GeoCoordinates) HasLongitude() bool {
	if o != nil && o.Longitude != nil {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float64 and assigns it to the Longitude field.
func (o *GeoCoordinates) SetLongitude(v float64) {
	o.Longitude = &v
}

func (o GeoCoordinates) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Altitude != nil {
		toSerialize["altitude"] = o.Altitude
	}
	if o.Latitude != nil {
		toSerialize["latitude"] = o.Latitude
	}
	if o.Longitude != nil {
		toSerialize["longitude"] = o.Longitude
	}
	return json.Marshal(toSerialize)
}

type NullableGeoCoordinates struct {
	value *GeoCoordinates
	isSet bool
}

func (v NullableGeoCoordinates) Get() *GeoCoordinates {
	return v.value
}

func (v *NullableGeoCoordinates) Set(val *GeoCoordinates) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoCoordinates) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoCoordinates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoCoordinates(val *GeoCoordinates) *NullableGeoCoordinates {
	return &NullableGeoCoordinates{value: val, isSet: true}
}

func (v NullableGeoCoordinates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoCoordinates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
