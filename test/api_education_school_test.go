/*
Libre Graph API

Testing EducationSchoolApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libregraph

import (
	"context"
	openapiclient "github.com/owncloud/libre-graph-api-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_libregraph_EducationSchoolApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EducationSchoolApiService AddClassToSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		httpRes, err := apiClient.EducationSchoolApi.AddClassToSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService AddUserToSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		httpRes, err := apiClient.EducationSchoolApi.AddUserToSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService CreateSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EducationSchoolApi.CreateSchool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService DeleteClassFromSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string
		var classId string

		httpRes, err := apiClient.EducationSchoolApi.DeleteClassFromSchool(context.Background(), schoolId, classId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService DeleteSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		httpRes, err := apiClient.EducationSchoolApi.DeleteSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService DeleteUserFromSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string
		var userId string

		httpRes, err := apiClient.EducationSchoolApi.DeleteUserFromSchool(context.Background(), schoolId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService GetSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolApi.GetSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService ListSchoolClasses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolApi.ListSchoolClasses(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService ListSchoolUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolApi.ListSchoolUsers(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService ListSchools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EducationSchoolApi.ListSchools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolApiService UpdateSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolApi.UpdateSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
