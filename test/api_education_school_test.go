/*
Libre Graph API

Testing EducationSchoolAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libregraph

import (
	"context"
	openapiclient "github.com/owncloud/libre-graph-api-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_libregraph_EducationSchoolAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EducationSchoolAPIService AddClassToSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		httpRes, err := apiClient.EducationSchoolAPI.AddClassToSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService AddUserToSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		httpRes, err := apiClient.EducationSchoolAPI.AddUserToSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService CreateSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EducationSchoolAPI.CreateSchool(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService DeleteClassFromSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string
		var classId string

		httpRes, err := apiClient.EducationSchoolAPI.DeleteClassFromSchool(context.Background(), schoolId, classId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService DeleteSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		httpRes, err := apiClient.EducationSchoolAPI.DeleteSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService DeleteUserFromSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string
		var userId string

		httpRes, err := apiClient.EducationSchoolAPI.DeleteUserFromSchool(context.Background(), schoolId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService GetSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolAPI.GetSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService ListSchoolClasses", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolAPI.ListSchoolClasses(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService ListSchoolUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolAPI.ListSchoolUsers(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService ListSchools", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EducationSchoolAPI.ListSchools(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationSchoolAPIService UpdateSchool", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var schoolId string

		resp, httpRes, err := apiClient.EducationSchoolAPI.UpdateSchool(context.Background(), schoolId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
