/*
Libre Graph API

Testing EducationClassTeachersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libregraph

import (
	"context"
	openapiclient "github.com/opencloud-eu/libre-graph-api-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_libregraph_EducationClassTeachersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EducationClassTeachersApiService AddTeacherToClass", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var classId string

		httpRes, err := apiClient.EducationClassTeachersApi.AddTeacherToClass(context.Background(), classId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassTeachersApiService DeleteTeacherFromClass", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var classId string
		var userId string

		httpRes, err := apiClient.EducationClassTeachersApi.DeleteTeacherFromClass(context.Background(), classId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassTeachersApiService GetTeachers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var classId string

		resp, httpRes, err := apiClient.EducationClassTeachersApi.GetTeachers(context.Background(), classId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
