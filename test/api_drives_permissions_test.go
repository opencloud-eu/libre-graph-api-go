/*
Libre Graph API

Testing DrivesPermissionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libregraph

import (
	"context"
	openapiclient "github.com/owncloud/libre-graph-api-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_libregraph_DrivesPermissionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DrivesPermissionsAPIService CreateLink", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var driveId string
		var itemId string

		resp, httpRes, err := apiClient.DrivesPermissionsAPI.CreateLink(context.Background(), driveId, itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DrivesPermissionsAPIService DeletePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var driveId string
		var itemId string
		var permId string

		httpRes, err := apiClient.DrivesPermissionsAPI.DeletePermission(context.Background(), driveId, itemId, permId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DrivesPermissionsAPIService GetPermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var driveId string
		var itemId string
		var permId string

		resp, httpRes, err := apiClient.DrivesPermissionsAPI.GetPermission(context.Background(), driveId, itemId, permId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DrivesPermissionsAPIService Invite", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var driveId string
		var itemId string

		resp, httpRes, err := apiClient.DrivesPermissionsAPI.Invite(context.Background(), driveId, itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DrivesPermissionsAPIService ListPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var driveId string
		var itemId string

		resp, httpRes, err := apiClient.DrivesPermissionsAPI.ListPermissions(context.Background(), driveId, itemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DrivesPermissionsAPIService UpdatePermission", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var driveId string
		var itemId string
		var permId string

		resp, httpRes, err := apiClient.DrivesPermissionsAPI.UpdatePermission(context.Background(), driveId, itemId, permId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
