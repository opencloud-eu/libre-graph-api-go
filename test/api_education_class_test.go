/*
Libre Graph API

Testing EducationClassApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libregraph

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/opencloud-eu/libre-graph-api-go"
)

func Test_libregraph_EducationClassApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EducationClassApiService AddUserToClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var classId string

		httpRes, err := apiClient.EducationClassApi.AddUserToClass(context.Background(), classId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassApiService CreateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EducationClassApi.CreateClass(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassApiService DeleteClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var classId string

		httpRes, err := apiClient.EducationClassApi.DeleteClass(context.Background(), classId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassApiService DeleteUserFromClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var classId string
		var userId string

		httpRes, err := apiClient.EducationClassApi.DeleteUserFromClass(context.Background(), classId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassApiService GetClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var classId string

		resp, httpRes, err := apiClient.EducationClassApi.GetClass(context.Background(), classId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassApiService ListClassMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var classId string

		resp, httpRes, err := apiClient.EducationClassApi.ListClassMembers(context.Background(), classId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassApiService ListClasses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EducationClassApi.ListClasses(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EducationClassApiService UpdateClass", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var classId string

		resp, httpRes, err := apiClient.EducationClassApi.UpdateClass(context.Background(), classId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
